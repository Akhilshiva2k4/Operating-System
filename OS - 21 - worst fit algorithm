#include <stdio.h>
#define MAX_BLOCKS 50
struct MemoryBlock {int id;int size;int allocated;};
void worstFit(int blockSize[], int m, int processSize[], int n) {
    struct MemoryBlock blocks[MAX_BLOCKS];
    int i, j;
    for (i = 0; i < m; i++) {
        blocks[i].id = i;
        blocks[i].size = blockSize[i];
        blocks[i].allocated = 0;
    }
    for (i = 0; i < n; i++) {
        int worstIdx = -1;
        for (j = 0; j < m; j++) {
            if (blocks[j].size >= processSize[i] && blocks[j].allocated == 0) {
                if (worstIdx == -1 || blocks[j].size > blocks[worstIdx].size) {
                    worstIdx = j;
                }
            }
        }   
        if (worstIdx != -1) {
            blocks[worstIdx].allocated = 1;
            printf("Process %d allocated to Block %d\n", i + 1, blocks[worstIdx].id + 1);
        } else {
            printf("Process %d cannot be allocated\n", i + 1);
        }
    }
}
int main() {
    int blockSize[] = {100, 500, 200, 300, 600};
    int processSize[] = {212, 417, 112, 426};
    int m = sizeof(blockSize) / sizeof(blockSize[0]);
    int n = sizeof(processSize) / sizeof(processSize[0]);
    printf("Memory blocks:\n");
    for (int i = 0; i < m; i++) {
        printf("Block %d: Size %d\n", i + 1, blockSize[i]);
    }
    printf("\nProcesses:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d: Size %d\n", i + 1, processSize[i]);
    }
    printf("\nAllocation:\n");
    worstFit(blockSize, m, processSize, n);   
    return 0;
}
